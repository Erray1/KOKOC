// <auto-generated />
using System;
using System.Collections.Generic;
using KOKOC.Matches.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KOKOC.Matches.Infrastructure.Migrations.Matches
{
    [DbContext(typeof(MatchesDbContext))]
    [Migration("20241013173532_AddedDateTimeIndex")]
    partial class AddedDateTimeIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KOKOC.Matches.Domain.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("KOKOC.Matches.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("StadiumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartingAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Score", "KOKOC.Matches.Domain.Entities.Match.Score#MatchScore", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("OpponentScore")
                                .HasColumnType("integer");

                            b1.Property<int>("SelfScore")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("OpponentTeamId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("StartingAt");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("KOKOC.Matches.Domain.Entities.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("KOKOC.Matches.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageURI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("KOKOC.Matches.Domain.Entities.Match", b =>
                {
                    b.HasOne("KOKOC.Matches.Domain.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KOKOC.Matches.Domain.Entities.Team", "OpponentTeam")
                        .WithMany()
                        .HasForeignKey("OpponentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KOKOC.Matches.Domain.Entities.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("OpponentTeam");

                    b.Navigation("Stadium");
                });
#pragma warning restore 612, 618
        }
    }
}
